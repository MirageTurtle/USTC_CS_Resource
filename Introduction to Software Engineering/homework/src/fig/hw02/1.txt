@startuml
class 仓库 {
    - 编号: int
    - 名称: string
    - 粮食类型: list of 粮食

    + 入库()
    + 出库()
}

interface 入库 {
    - 仓库编号: int
    - 粮食类型: 粮食
    - 数量: int
    - 时间: date

    + 入库()
    + 通知观察者()
}

interface 出库 {
    - 仓库编号: int
    - 粮食类型: 粮食
    - 数量: int
    - 时间: date

    + 出库()
}

仓库 ..|> 入库
仓库 ..|> 出库

class 主体 {
    - 加工厂: list of 加工厂

    + 用户注册(加工厂)
    + 用户注销(加工厂)
}

主体 ..> 加工厂

class 加工厂 {
    - 编号: int
    - 名称: string
    - 感兴趣的粮食: 粮食
    - 通信方式: 通信方式

    + 接收通知(通知方式)
}

加工厂 ..> 抽象通信器

class 粮食 {
    - 编号: int
    - 名称: string
    - 数量: int

    + 发芽()
    + 通知观察者()
}

abstract 抽象通信器 {
    + 发送通知(加工厂)
}

class 通信器 {
    + 发送通知(加工厂)
}

通信器 ..|> 抽象通信器

abstract 抽象通信方式 {
    - 通信器: 通信器
    + 装饰器(通信器)
    + 发送通知(加工厂)
}

class 短信 {
    + 发送通知(加工厂)
}

class 电子邮件 {
    + 发送通知(加工厂)
}

抽象通信方式 ..|> 抽象通信器
短信 --|> 抽象通信方式
电子邮件 --|> 抽象通信方式

class 粮食观察者 {
    + 更新()
    + 通知加工厂()
}

粮食观察者 --o 粮食
粮食观察者 --o 入库
粮食观察者 --> 加工厂
粮食观察者 ..> 主体
粮食观察者 ..> 抽象通信器

@enduml